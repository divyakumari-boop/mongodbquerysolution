1. Write a MongoDB query to display all the documents in the collection restaurants. 
ans:-db.restaurant.find({})
2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
 ans:- db.restaurant.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant. 
ans:- db.restaurant.find({},{"_id":0,"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant. 
ans:-db.restaurant.find({},{"_id":0,"restaurant_id":1,"name":1,"borough":1,"zip code":1})
5. Write a MongoDB query to display all the restaurant which is in the borough Bronx. 
ans:- db.restaurant.find({"borough":"Bronx"},{"name":1})
6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx. 
ans:- db.restaurant.find({"borough":"Bronx"},{"name":1}).limit(5)
7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
ans:- db.restaurant.find({"borough":"Bronx"},{"_id":0,"name":1}).skip(5).limit(5)
8. Write a MongoDB query to find the restaurants who achieved a score more than 90. 
ans:- db.restaurant.find({grades:{$demMatch:{"score":{$gt:90}}}})
9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100. 
ans:- db.restaurant.find({grades:{$demMatch:{"score":{$gt:80,$lt:100}}}})
10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
ans:- db.restaurant.find({"address.coord":{$lt:-95.754168}})
11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168. 
ans:-db.restaurant.find({"cuisine":{$ne:"American"},"grades.score":{$gt:70},"address.coord.0":{$lt:-65.754168}})
13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.  
ans:-db.restaurant.find({"cuisine":{$ne:"American"},"grades.grade":"A","borough":{$ne:"Brooklyn"}}).sort({"cuisine":-1})
14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name. 
ans:- db.restaurant.find({"name":/^Wil/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name. 
ans:- db.restaurant.find({"name":/ces$/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})
16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name. 
ans:-db.restaurant.find({"name":/Reg/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1})

